---
title: "Model properties ($\\nu$ non-fixed)"
date: "Created: 05-07-2024. Last modified: `r format(Sys.time(), '%d-%m-%Y.')`"
output:
  html_document:
    mathjax: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
    highlight: pygments
    theme: flatly
    code_folding: show # class.source = "fold-hide" to hide code and add a button to show it
    # df_print: paged
    toc: true
    toc_float:
      collapsed: true
      smooth_scroll: true
    number_sections: false
    fig_caption: true
    code_download: true
always_allow_html: true
bibliography: 
  - references.bib
  - grateful-refs.bib
header-includes:
  - \newcommand{\ar}{\mathbb{R}}
  - \newcommand{\llav}[1]{\left\{#1\right\}}
  - \newcommand{\pare}[1]{\left(#1\right)}
  - \newcommand{\Ncal}{\mathcal{N}}
  - \newcommand{\Vcal}{\mathcal{V}}
  - \newcommand{\Ecal}{\mathcal{E}}
  - \newcommand{\Wcal}{\mathcal{W}}
---

```{r xaringanExtra-clipboard, echo = FALSE}
htmltools::tagList(
  xaringanExtra::use_clipboard(
    button_text = "<i class=\"fa-solid fa-clipboard\" style=\"color: #00008B\"></i>",
    success_text = "<i class=\"fa fa-check\" style=\"color: #90BE6D\"></i>",
    error_text = "<i class=\"fa fa-times-circle\" style=\"color: #F94144\"></i>"
  ),
  rmarkdown::html_dependency_font_awesome()
)
```


```{css, echo = FALSE}
body .main-container {
  max-width: 100% !important;
  width: 100% !important;
}
body {
  max-width: 100% !important;
}

body, td {
   font-size: 16px;
}
code.r{
  font-size: 14px;
}
pre {
  font-size: 14px
}
.custom-box {
  background-color: #f5f7fa; /* Light grey-blue background */
  border-color: #e1e8ed; /* Light border color */
  color: #2c3e50; /* Dark text color */
  padding: 15px; /* Padding inside the box */
  border-radius: 5px; /* Rounded corners */
  margin-bottom: 20px; /* Spacing below the box */
}
.caption {
  margin: auto;
  text-align: center;
  margin-bottom: 20px; /* Spacing below the box */
}
```


Go back to the [About page](about.html). To see how the covariance function changes when the location changes, go to [model_properties1.html](model_properties1.html).

::: {.custom-box}
This vignette illustrates how our proposed approach allows for Gaussian processes with general smoothness and non-stationary covariance on any compact metric graph. Recall that these processes are defined as solutions to 
\begin{equation}\label{SPDE}\tag{SPDE}
(\kappa^2 - \Delta_{\Gamma})^{\alpha/2}(\tau u) = \Wcal, \quad \text{on $\Gamma$}, 
\end{equation}
where $\Delta_{\Gamma}$ is the so-called Kirchhoff--Laplacian, $\tau(\cdot)$ and $\kappa(\cdot)$ are spatially varying functions that control the marginal variance and practical correlation range, respectively, $\alpha>1/2$ controls the smoothness, and $\Wcal$ is Gaussian white noise defined on a probability space $\pare{\Omega,\mathcal{F},\mathbb{P}}$.
:::


Below we set some global options for all code chunks in this document.


```{r}
# Set seed for reproducibility
set.seed(1982) 
# Set global options for all code chunks
knitr::opts_chunk$set(
  # Disable messages printed by R code chunks
  message = FALSE,    
  # Disable warnings printed by R code chunks
  warning = FALSE,    
  # Show R code within code chunks in output
  echo = TRUE,        
  # Include both R code and its results in output
  include = TRUE,     
  # Evaluate R code chunks
  eval = TRUE,       
  # Enable caching of R code chunks for faster rendering
  cache = FALSE,      
  # Align figures in the center of the output
  fig.align = "center",
  # Enable retina display for high-resolution figures
  retina = 2,
  # Show errors in the output instead of stopping rendering
  error = TRUE,
  # Do not collapse code and output into a single block
  collapse = FALSE
)
# Start the figure counter
fig_count <- 0
# Define the captioner function
captioner <- function(caption) {
  fig_count <<- fig_count + 1
  paste0("Figure ", fig_count, ": ", caption)
}
# Define the function to truncate a number to two decimal places
truncate_to_two <- function(x) {
  floor(x * 100) / 100
}
```


Below we load the necessary libraries and define the auxiliary functions.

```{r}
library(rSPDE)
library(MetricGraph)

library(dplyr)
library(plotly)
library(scales)
library(patchwork)
library(tidyr)

library(here)
library(rmarkdown)
# Cite all loaded packages
library(grateful) 
```

Below we define function `compute_pcr()`, which computes the practical correlation. It receives the output of the [`rSPDE::spde.matern.operators()`](https://davidbolin.github.io/rSPDE/reference/spde.matern.operators.html) function (when evaluated on compatible parameters) and a threshold `cor_threshold`. Using the correlation matrix and the geodesic distance matrix, for each point in the mesh, it computes the practical correlation range as the minimum geodesic distance such that the correlation is below a given threshold `cor_threshold` (usually defined as 0.1). The function returns a vector with the practical correlation range for each point in the mesh.

<div style="color: blue;">
********
**Press the Show button below to reveal the code.**

********
</div>

```{r, class.source = "fold-hide"}
compute_pcr <- function(op, cor_threshold) {
  
  # Compute the covariance matrix
  cov_matrix <- op$covariance_mesh() 
  # Compute the correlation matrix
  cor_matrix <-cov2cor(cov_matrix)
  # Compute the geodesic distance matrix
  op$graph$compute_geodist_mesh() 
  # Extract the geodesic distance matrix
  dist_matrix <- op$graph$mesh$geo_dist 
  # Initialize the vector to store the practical correlation range
  pcr <- numeric(dim(cor_matrix)[1]) 
  
  process_row <- function(row_index) {
    # For each row_index, create an auxiliary matrix aux_mat with the correlation and geodesic distance
    aux_mat <- cbind(cor_matrix[row_index, ], dist_matrix[row_index, ]) 
    # Order the auxiliary matrix by the geodesic distance
    ordered_aux_mat <- aux_mat[order(aux_mat[, 2]), ] 
    # Filter the auxiliary ordered matrix by the correlation threshold
    filtered_aux_mat <- ordered_aux_mat[ordered_aux_mat[,1] < cor_threshold, ] 
    if (nrow(filtered_aux_mat) > 0) {
      # Return the minimum geodesic distance such that the correlation is below the threshold
      return(filtered_aux_mat[1, 2]) 
    } else {
      # If the condition is not satisfied, record the minimum correlation value and return an error message
      min <- min(aux_mat[, 1])
      stop(paste0("The condition cor_matrix[row_index, ] < cor_threshold is not satisfied for row_index = ", 
                  row_index, ". Increase cor_threshold. The minimum value of cor_matrix[row_index, ] is ",
                  min))
    }
  }
  
  pcr <- sapply(1:dim(cor_matrix)[1], process_row)
  
  return(pcr)
}
```


Below we build the `MetricGraph` package's logo graph and plot the mesh.

```{r, fig.width = 5, fig.height = 5, fig.cap = captioner("Mesh of the MetricGraph package's logo.")}
# This is a function from MetricGraph package that returns a list of edges
edges <- logo_lines() 
# Create a new graph object
logo_graph <- metric_graph$new(edges = edges, perform_merges = TRUE) 
# Prune the vertices
#logo_graph$prune_vertices()
# Build the mesh
logo_graph$build_mesh(h = 0.05) 
# Extract the mesh locations in Euclidean coordinates
xypoints <- logo_graph$mesh$V
# Create a plot of the mesh
plot_mesh <- logo_graph$plot(mesh = TRUE) + 
  ggtitle("Mesh") + 
  theme_minimal() + 
  theme(text = element_text(family = "Palatino"))
print(plot_mesh)
```

# Non-stationary features

Below we define $\tau(\cdot)$ (`model_for_tau`) and $\kappa(\cdot)$ (`model_for_kappa`) in \eqref{SPDE} as $\tau(s) = \exp(0.05\cdot(x(s)-y(s)))$ and $\kappa(s) = \exp(0.1\cdot(x(s)-y(s)))$, where $(x(s),y(s))$ are Euclidean coordinates on the plane. These choices make $\tau(\cdot)$ and $\kappa(\cdot)$ large in the bottom-right region of the `MetricGraph` package's logo, as shown in Figure 2.

```{r}
# Define an auxiliary variable
aux <- 0.1*(xypoints[,1] - xypoints[,2])
# Define the matrices B.tau and B.kappa
B.tau <- cbind(0, 1, 0, 0.5*aux, 0)
B.kappa <- cbind(0, 0, 1, 0, aux)
# Log-regression coefficients
theta <- c(0, 0, 1, 1) 
# Define the models for tau and kappa
model_for_tau <- exp(B.tau[,-1]%*%theta)
model_for_kappa <- exp(B.kappa[,-1]%*%theta)
```

Below we consider $\alpha = 0.9, 1.3, 2.1$ and compute the covariance between one point, say the $289$-th point, and all other points on the mesh. 

```{r}
# Choose a row number, any between 1 and dim(est_cov_matrix1)[1]
rownumber <- 289 
# Choose alpha
nu1 <- 0.4
alpha1 <- nu1 + 1/2
# Compute the operator
op1 <- rSPDE::spde.matern.operators(graph = logo_graph, 
                                      B.tau = B.tau,
                                      B.kappa =  B.kappa,
                                      parameterization = "spde",
                                      theta = theta, 
                                      alpha = alpha1)
# Compute the covariance between the rownumber-th point and all other points
est_cov_matrix1 <- op1$covariance_mesh()
rowfromcov1 <- est_cov_matrix1[rownumber, ]
# Choose alpha
nu2 <- 0.8
alpha2 <- nu2 + 1/2
# Compute the operator
op2 <- rSPDE::spde.matern.operators(graph = logo_graph, 
                                      B.tau = B.tau,
                                      B.kappa =  B.kappa,
                                      parameterization = "spde",
                                      theta = theta, 
                                      alpha = alpha2)
# Compute the covariance between the rownumber-th point and all other points
est_cov_matrix2 <- op2$covariance_mesh()
rowfromcov2 <- est_cov_matrix2[rownumber, ]
# Choose alpha
nu3 <- 1.6
alpha3 <- nu3 + 1/2
# Compute the operator
op3 <- rSPDE::spde.matern.operators(graph = logo_graph, 
                                      B.tau = B.tau,
                                      B.kappa =  B.kappa,
                                      parameterization = "spde",
                                      theta = theta, 
                                      alpha = alpha3)
# Compute the covariance between the rownumber-th point and all other points
est_cov_matrix3 <- op3$covariance_mesh()
rowfromcov3 <- est_cov_matrix3[rownumber, ]
```


# Covariance plots

Below we plot the covariance functions $r_\nu(\cdot)=\text{Cov}(u(s_0),u(\cdot))$ for different smoothness parameter $\nu$ on the `MetricGraph` package's logo. 


<div style="color: blue;">
********
**Press the Show button below to reveal the code.**

********
</div>

```{r, fig.width = 13.83, fig.height = 4.5, fig.cap = captioner("Example of covariance functions $r_\\nu(\\cdot)$ for different smoothness parameter $\\nu$ on the `MetricGraph` package's logo."), class.source = "fold-hide"}
# Create a plot for the covariance between point1 and all other points
c1 <- logo_graph$plot_function(X = rowfromcov1, vertex_size = 0) +
  ggtitle(latex2exp::TeX("$r_{0.4}$")) +
  theme_minimal() +
  theme(text = element_text(family = "Palatino"),
        plot.title = element_text(size = 12)) +
  annotate("point", x = xypoints[rownumber,1], y = xypoints[rownumber,2], size = 1, color = "black") +
  annotate("text", x = xypoints[rownumber,1] - 0.8, y = xypoints[rownumber,2], label = "s[0]", parse = TRUE, size = 3, hjust = 0, color = "black")
# Create a plot for the covariance between point2 and all other points
c2 <- logo_graph$plot_function(X = rowfromcov2, vertex_size = 0) +
  ggtitle(latex2exp::TeX("$r_{0.8}$")) +
  theme_minimal() +
  theme(text = element_text(family = "Palatino"),
        plot.title = element_text(size = 12)) +
  annotate("point", x = xypoints[rownumber,1], y = xypoints[rownumber,2], size = 1, color = "black") +
  annotate("text", x = xypoints[rownumber,1] - 0.8, y = xypoints[rownumber,2], label = "s[0]", parse = TRUE, size = 3, hjust = 0, color = "black")
# Create a plot for the covariance between point3 and all other points
c3 <- logo_graph$plot_function(X = rowfromcov3, vertex_size = 0) +
  ggtitle(latex2exp::TeX("$r_{1.6}$")) +
  theme_minimal() +
  theme(text = element_text(family = "Palatino"),
        plot.title = element_text(size = 12)) +
  annotate("point", x = xypoints[rownumber,1], y = xypoints[rownumber,2], size = 1, color = "black") +
  annotate("text", x = xypoints[rownumber,1] - 0.8, y = xypoints[rownumber,2], label = "s[0]", parse = TRUE, size = 3, hjust = 0, color = "black")
# Combine the three plots
cs <- c1 + c2 + c3
# Save the combined plot
ggsave(here("data_files/cov_plots_diff_nu.png"), plot = cs, width = 13.83, height = 4.5, dpi = 300)
# Print the combined plot
print(cs)
```


Below we show 3D plots of the covariance functions $r_\nu(\cdot)=\text{Cov}(u(s_0),u(\cdot))$ for different smoothness parameter $\nu$ on the `MetricGraph` package's logo. 

<div style="color: blue;">
********
**Press the Show button below to reveal the code.**

********
</div>

```{r, class.source = "fold-hide"}
p1 <- logo_graph$plot_function(X = rowfromcov1, vertex_size = 1, plotly = TRUE, edge_color = "black", edge_width = 3, line_color = "blue", line_width = 3)
p2 <- logo_graph$plot_function(X = rowfromcov2, vertex_size = 1, plotly = TRUE, edge_color = "black", edge_width = 3, line_color = "red", line_width = 3, p = p1)
p3 <- logo_graph$plot_function(X = rowfromcov3, vertex_size = 1, plotly = TRUE, edge_color = "black", edge_width = 3, line_color = "darkgreen", line_width = 3, p = p2)
p <- p3 %>%
  config(mathjax = 'cdn') %>%
  layout(font = list(family = "Palatino"),
         showlegend = FALSE,
         scene = list(
           aspectratio = list(x = 1.5, y = 1.5, z = 1.5),
           camera = list(
      eye = list(x = 3, y = -2, z = 0.5),  # Adjust the viewpoint
      center = list(x = 0, y = 0, z = 0)),     # Focus point
           annotations = list(
             list(
               x = 3, y = 4, z = 0.38,
               text = TeX("\\alpha"),
               textangle = 0, ax = 60, ay = 0,
               font = list(color = "black", size = 16),
               arrowcolor = "white", arrowsize = 1, arrowwidth = 0.1,arrowhead = 1),
             list(
               x = 3, y = 4, z = 0.35,
               text = TeX(paste0("\\bullet\\mbox{ ", alpha1, "}")),
               textangle = 0, ax = 60, ay = 0,
               font = list(color = "blue", size = 16),
               arrowcolor = "white", arrowsize = 1, arrowwidth = 0.1,arrowhead = 1),
             list(
               x = 3, y = 4, z = 0.33,
               text = TeX(paste0("\\bullet\\mbox{ ", alpha2, "}")),
               textangle = 0, ax = 60, ay = 0,
               font = list(color = "red", size = 16),
               arrowcolor = "white", arrowsize = 1, arrowwidth = 0.1,arrowhead = 1),
             list(
               x = 3, y = 4, z = 0.31,
               text = TeX(paste0("\\bullet\\mbox{ ", alpha3, "}")),
               textangle = 0, ax = 60, ay = 0,
               font = list(color = "darkgreen", size = 16),
               arrowcolor = "white", arrowsize = 1, arrowwidth = 0.1,arrowhead = 1),
             list(
               x = 2.5, y = 4.5, z = 0,
               text = TeX("s_0"),
               textangle = 0, ax = 0, ay = 15,
               font = list(color = "black", size = 16),
               arrowcolor = "white", arrowsize = 1, arrowwidth = 0.1,arrowhead = 1)))) %>%
  add_trace(x = xypoints[rownumber, 2], y = xypoints[rownumber, 1], z = 0, mode = "markers", type = "scatter3d",
            marker = list(size = 4, color = "black", symbol = 104))
# Save the 3D plot
save(p, file = here("data_files/3d_cov_plots_diff_nu.RData"))
```


```{r, fig.height = 8, out.width = "100%", fig.cap = captioner("Example of covariance functions $r_\\nu(\\cdot)$ for different smoothness parameter $\\nu$ on the `MetricGraph` package's logo.")}
# Print the 3D plot
p
```

Here a list of the packages used in this document.

```{r}
cite_packages(output = "paragraph", out.dir = ".")
```
