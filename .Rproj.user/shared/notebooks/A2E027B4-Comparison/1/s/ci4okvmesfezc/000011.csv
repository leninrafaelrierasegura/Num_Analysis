"0","# Precompute the LHS1 matrix"
"0","LHS1 <- Pr + time_step * solve(C, Pl)"
"0","# Precompute the LHS2 matrix"
"0","aux <- Pr %*% solve(Pl, C)"
"0","LHS2 <- aux + time_step * Matrix::Diagonal(nrow(C)) "
"0",""
"0",""
"0",""
"0","# Initialize U matrix to store solution at each time step"
"0","U_approx1 <- matrix(NA, nrow = nrow(C), ncol = length(time_seq))"
"0","U_approx1[, 1] <- U_0"
"0",""
"0","U_approx2 <- matrix(NA, nrow = nrow(C), ncol = length(time_seq))"
"0","U_approx2[, 1] <- U_0"
"0",""
"0","# Time-stepping loop"
"0","for (k in 1:(length(time_seq) - 1)) {"
"0","  # Compute the right-hand side for the first equation"
"0","  RHS1 <- Pr %*% U_approx1[, k]"
"0","  U_approx1[, k + 1] <- as.matrix(solve(LHS1, RHS1))"
"0","  # Compute the right-hand side for the second equation"
"0","  RHS2 <- aux %*% U_approx2[, k]"
"0","  U_approx2[, k + 1] <- as.matrix(solve(LHS2, RHS2))"
"0","}"
